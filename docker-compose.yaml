services:
  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    ports:
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
    volumes:
      - ./configs/nginx-proxy-manager/data:/data
      - ./configs/nginx-proxy-manager/letsencrypt:/etc/letsencrypt
    restart: unless-stopped

  homarr:
    image: ghcr.io/homarr-labs/homarr:latest 
    container_name: homarr
    environment:
      - PUID=1000
      - PGID=1000
      - SECRET_ENCRYPTION_KEY=${HOMARR_SECRET_ENCRYPTION_KEY}
    volumes:
      - ./configs/homarr:/appdata
    ports:
      - 4000:7575
    restart: unless-stopped

  byparr:
    image: ghcr.io/thephaseless/byparr
    container_name: byparr
    ports:
      - 8191:8191
    restart: unless-stopped

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./configs/bazarr:/config
      - ./media/library/movies:/movies
      - ./media/library/series:/tvshows
    ports:
      - 6767:6767
    restart: unless-stopped
  
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./configs/jellyfin:/config
      - ./media/library:/media
    ports:
      - 8096:8096 # web interface
      - 8920:8920 # secure interface
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./configs/prowlarr:/config 
    ports:
      - 9696:9696
    restart: unless-stopped

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - WEBUI_PORT=8081
    volumes:
      - ./configs/qbittorrent:/config
      - ./media/downloads:/downloads
      - ./media/library:/library
    ports:
      - 8081:8081
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./configs/radarr:/config
      - ./media/library/movies:/movies
      - ./media/downloads/movies:/downloads
    ports:
      - 7878:7878
    restart: unless-stopped

  sonarr-series:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr-series
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./configs/sonarr-series:/config
      - ./media/library/series:/tvshows
      - ./media/downloads/series:/downloads
    ports:
      - 8988:8989
    restart: unless-stopped
  
  sonarr-anime:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr-anime
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./configs/sonarr-anime:/config
      - ./media/library/anime:/tvshows
      - ./media/downloads/anime:/downloads
    ports:
      - 8989:8989
    restart: unless-stopped

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./configs/readarr:/config
      - ./media/library/books:/books
      - ./media/downloads/books:/downloads
    ports:
      - 8787:8787
    restart: unless-stopped

  immich-server:
    container_name: immich-server
    image: ghcr.io/immich-app/immich-server:release
    volumes:
      - ${IMMICH_UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    ports:
      - '2283:2283'
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich-machine-learning
    image: ghcr.io/immich-app/immich-machine-learning:release
    volumes:
      - immich-model-cache:/cache
    restart: always
    healthcheck:
      disable: false

  redis:
    container_name: immich-redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:42cba146593a5ea9a622002c1b7cba5da7be248650cbb64ecb9c6c33d29794b1
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  database:
    container_name: immich-postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:739cdd626151ff1f796dc95a6591b55a714f341c737e27f045019ceabf8e8c52
    environment:
      POSTGRES_PASSWORD: ${IMMICH_DB_PASSWORD}
      POSTGRES_USER: ${IMMICH_DB_USERNAME}
      POSTGRES_DB: ${IMMICH_DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${IMMICH_DB_DATA_LOCATION}:/var/lib/postgresql/data
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1; Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: >-
      postgres -c shared_preload_libraries=vectors.so -c 'search_path="$$user", public, vectors' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=512MB -c wal_compression=on
    restart: always

volumes:
  immich-model-cache:

networks:
  default:
    name: media-server-network
